"use strict";
/* IMPORT */
var plain_object_is_empty_1 = require("plain-object-is-empty");
var plain_object_merge_1 = require("plain-object-merge");
var consts_1 = require("./consts");
/* HELPERS */
var isArray = Array.isArray;
/* METHODS */
function get(object, path, fallback) {
    if (typeof path !== 'string' || typeof object !== 'object' || object === null)
        return fallback;
    var keys = path.split(consts_1.DIVIDER);
    for (var i = 0, l = keys.length; i < l; i++) {
        var key = keys[i];
        if (key === 'constructor' || key === 'prototype' || key === '__proto__')
            break;
        object = object[key];
        if (object === undefined)
            return fallback;
        if (object === null)
            return (i === l - 1) ? object : fallback;
    }
    return object;
}
function has(object, path) {
    return get(object, path) !== undefined;
}
function set(object, path, value) {
    if (typeof path !== 'string' || typeof object !== 'object' || object === null)
        return object;
    var keys = path.split(consts_1.DIVIDER), source = object;
    for (var i = 0, l = keys.length; i < l; i++) {
        var key = keys[i];
        if (key === 'constructor' || key === 'prototype' || key === '__proto__')
            break;
        if (i === l - 1) {
            object[key] = value;
        }
        else {
            var value_1 = object[key];
            if (typeof value_1 !== 'object' || value_1 === null) {
                object = object[key] = {};
            }
            else {
                object = value_1;
            }
        }
    }
    return source;
}
function del(object, path) {
    if (typeof path !== 'string' || typeof object !== 'object' || object === null)
        return;
    var keys = path.split(consts_1.DIVIDER);
    for (var i = 0, l = keys.length; i < l; i++) {
        var key = keys[i];
        if (key === 'constructor' || key === 'prototype' || key === '__proto__')
            break;
        if (i === l - 1) {
            delete object[key];
        }
        else {
            var value = object[key];
            if (typeof value !== 'object' || value === null)
                return;
            object = value;
        }
    }
}
function flatArray(arr) {
    var length = arr.length, flattened = new Array(length);
    for (var i = 0; i < length; i++) {
        var value = arr[i];
        if (typeof value !== 'object' || value === null) {
            flattened[i] = value;
        }
        else {
            flattened[i] = flat(value);
        }
    }
    return flattened;
}
function flatObject(object, prefix) {
    if (prefix === void 0) { prefix = ''; }
    var flattened = {};
    for (var key in object) {
        if (key === 'constructor' || key === 'prototype' || key === '__proto__')
            break;
        var value = object[key];
        if (value === undefined)
            continue;
        if (typeof value !== 'object' || value === null) {
            flattened["" + prefix + key] = value;
        }
        else if (isArray(value)) {
            flattened["" + prefix + key] = flatArray(value);
        }
        else if (plain_object_is_empty_1.default(value)) {
            flattened["" + prefix + key] = {};
        }
        else {
            var flattenedDeep = flatObject(value, "" + prefix + key + consts_1.DIVIDER);
            for (var key_1 in flattenedDeep) {
                flattened[key_1] = flattenedDeep[key_1];
            }
        }
    }
    return flattened;
}
function flat(object, prefix) {
    if (prefix === void 0) { prefix = ''; }
    if (isArray(object))
        return flatArray(object);
    return flatObject(object, prefix);
}
function unflatArray(arr) {
    var length = arr.length, unflattened = new Array(length);
    for (var i = 0; i < length; i++) {
        var value = arr[i];
        if (typeof value !== 'object' || value === null) {
            unflattened[i] = value;
        }
        else {
            unflattened[i] = unflat(value);
        }
    }
    return unflattened;
}
function unflatObject(object) {
    var unflattened = {};
    for (var key in object) {
        if (key === 'constructor' || key === 'prototype' || key === '__proto__')
            break;
        var value = object[key];
        if (value === undefined)
            continue;
        if (typeof value !== 'object' || value === null) {
            set(unflattened, key, value);
        }
        else {
            var valuePrev = get(unflattened, key);
            if (typeof valuePrev !== 'object' || valuePrev === null) {
                set(unflattened, key, unflat(value));
            }
            else {
                set(unflattened, key, plain_object_merge_1.default([valuePrev, unflat(value)]));
            }
        }
    }
    return unflattened;
}
function unflat(object) {
    if (isArray(object))
        return unflatArray(object);
    return unflatObject(object);
}
/* PATH PROP */
var PathProp = { get: get, has: has, set: set, delete: del, flat: flat, unflat: unflat };
/* EXPORT */
module.exports = PathProp;
module.exports.default = PathProp;
Object.defineProperty(module.exports, "__esModule", { value: true });
